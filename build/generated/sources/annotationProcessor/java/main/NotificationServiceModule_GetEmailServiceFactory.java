// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class NotificationServiceModule_GetEmailServiceFactory
    implements Factory<NotificationService> {
  private final NotificationServiceModule module;

  private final Provider<EmailService> emailServiceProvider;

  public NotificationServiceModule_GetEmailServiceFactory(
      NotificationServiceModule module, Provider<EmailService> emailServiceProvider) {
    this.module = module;
    this.emailServiceProvider = emailServiceProvider;
  }

  @Override
  public NotificationService get() {
    return Preconditions.checkNotNull(
        module.getEmailService(emailServiceProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<NotificationService> create(
      NotificationServiceModule module, Provider<EmailService> emailServiceProvider) {
    return new NotificationServiceModule_GetEmailServiceFactory(module, emailServiceProvider);
  }

  public static NotificationService proxyGetEmailService(
      NotificationServiceModule instance, Object emailService) {
    return instance.getEmailService((EmailService) emailService);
  }
}
