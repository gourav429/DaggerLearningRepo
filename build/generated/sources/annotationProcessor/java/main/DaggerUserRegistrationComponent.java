// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
import dagger.internal.Preconditions;

public final class DaggerUserRegistrationComponent implements UserRegistrationComponent {
  private UserRepositoryModule userRepositoryModule;

  private NotificationServiceModule notificationServiceModule;

  private DaggerUserRegistrationComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static UserRegistrationComponent create() {
    return new Builder().build();
  }

  private UserRepository getUserRepository() {
    return Preconditions.checkNotNull(
        userRepositoryModule.getSQLRepository(new SQLRepository()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.userRepositoryModule = builder.userRepositoryModule;
    this.notificationServiceModule = builder.notificationServiceModule;
  }

  @Override
  public UserRegistrationService getUserRegistrationService() {
    return new UserRegistrationService(
        getUserRepository(),
        Preconditions.checkNotNull(
            notificationServiceModule.getMessageService(),
            "Cannot return null from a non-@Nullable @Provides method"));
  }

  public static final class Builder {
    private UserRepositoryModule userRepositoryModule;

    private NotificationServiceModule notificationServiceModule;

    private Builder() {}

    public UserRegistrationComponent build() {
      if (userRepositoryModule == null) {
        this.userRepositoryModule = new UserRepositoryModule();
      }
      if (notificationServiceModule == null) {
        this.notificationServiceModule = new NotificationServiceModule();
      }
      return new DaggerUserRegistrationComponent(this);
    }

    public Builder notificationServiceModule(NotificationServiceModule notificationServiceModule) {
      this.notificationServiceModule = Preconditions.checkNotNull(notificationServiceModule);
      return this;
    }

    public Builder userRepositoryModule(UserRepositoryModule userRepositoryModule) {
      this.userRepositoryModule = Preconditions.checkNotNull(userRepositoryModule);
      return this;
    }
  }
}
