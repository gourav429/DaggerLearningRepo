// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
import dagger.internal.Factory;
import javax.inject.Provider;

public final class UserRegistrationService_Factory implements Factory<UserRegistrationService> {
  private final Provider<UserRepository> userRepositoryProvider;

  private final Provider<NotificationService> notificationServiceProvider;

  public UserRegistrationService_Factory(
      Provider<UserRepository> userRepositoryProvider,
      Provider<NotificationService> notificationServiceProvider) {
    this.userRepositoryProvider = userRepositoryProvider;
    this.notificationServiceProvider = notificationServiceProvider;
  }

  @Override
  public UserRegistrationService get() {
    return new UserRegistrationService(
        userRepositoryProvider.get(), notificationServiceProvider.get());
  }

  public static Factory<UserRegistrationService> create(
      Provider<UserRepository> userRepositoryProvider,
      Provider<NotificationService> notificationServiceProvider) {
    return new UserRegistrationService_Factory(userRepositoryProvider, notificationServiceProvider);
  }

  public static UserRegistrationService newUserRegistrationService(
      Object userRepository, Object notificationService) {
    return new UserRegistrationService(
        (UserRepository) userRepository, (NotificationService) notificationService);
  }
}
